{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'custom-carousel-paragraph'
  ]
%}
{% if content.field_alignment %}
  {%
    set classes = classes|merge({bootstrap: content.field_alignment|render|striptags|trim|lower})
%}
{% endif %}
{% set accordion_id = random(100) %}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
	{% if paragraph.field_image|length > 1 %}
	<div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="2000">
		<div class="carousel-inner">
		  <div class="item active">
			<img class="for-desktop"  src="{{ file_url(paragraph.field_image[0].entity.uri.value) }}" alt="img">
			<img class="for-mobile" src="{{ file_url(paragraph.field_mobile_image[0].entity.uri.value) }}" alt="img">
		  </div>
		  {% for i in 1..paragraph.field_image|length-1 %}
		  <div class="item">
			<img class="for-desktop" src="{{ file_url(paragraph.field_image[i].entity.uri.value) }}" alt="img">
			<img class="for-mobile" src="{{ file_url(paragraph.field_mobile_image[i].entity.uri.value) }}" alt="img">
		  </div>
		  {% endfor %}
		</div>
		<!-- Left and right controls -->
		<a class="left carousel-control" href="#myCarousel" data-slide="prev">
		  <span class="glyphicon glyphicon-chevron-left"></span>
		  <span class="sr-only">Previous</span>
		</a>
		<a class="right carousel-control" href="#myCarousel" data-slide="next">
		  <span class="glyphicon glyphicon-chevron-right"></span>
		  <span class="sr-only">Next</span>
		</a>
	</div>
	{% else %}
	<div class="text-over-image-block for-desktop" style="background-image: url('{{ file_url(paragraph.field_image[0].entity.uri.value) }}');">
		<div class="text-over-image">
            <h4>{{ content.field_title }}</h4>
			<h1>{{ content.field_desc }}</h1>
       </div>
	</div>
	<div class="text-over-image-block for-mobile">
		<div class="text-over-image">
            <h4>{{ content.field_title }} {{ content.field_desc }}</h4>
       </div>
	</div>
	{% endif %}
    {% endblock %}
  </div>
{% endblock paragraph %}
